{"ast":null,"code":"var _jsxFileName = \"/Users/alexma/Desktop/spacetagram/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { ReactComponent as HeartIcon } from \"./svg/heart-outline.svg\";\nimport { ReactComponent as HomeIcon } from \"./svg/home-outline.svg\";\nimport { ReactComponent as NotificationIcon } from \"./svg/notifications-outline.svg\";\nimport CardComponent from \"./CardComponent\";\nimport useBatchedNasaImageQuery from \"./hooks/useBatchedNasaImageQuery\";\nimport { dateComparison } from \"./utils/dateUtils\";\nimport profilePic from \"./profilepic.jpg\";\nimport \"./App.scss\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [selectedDate, setSelectedDate] = useState(Date.now());\n  const [currBatch, setCurrBatch] = useState(0);\n\n  const setSelectedDateHandler = newDate => {\n    if (!dateComparison(newDate, new Date(), \"after\")) {\n      setSelectedDate(newDate);\n      setCurrBatch(0);\n    }\n  };\n\n  const batchSize = 7;\n  const [data, isAllDataFetched, isLoading, error] = useBatchedNasaImageQuery(selectedDate, currBatch, batchSize);\n  console.log(data);\n  let cardComponents = (data || []).map((_ref, index) => {\n    let {\n      hdurl,\n      copyright,\n      explanation,\n      title,\n      date\n    } = _ref;\n    let ref = null;\n\n    if (index === data.length - 1) {\n      ref = lastCardComponent;\n    }\n\n    return /*#__PURE__*/_jsxDEV(CardComponent, {\n      ref: ref,\n      date: date,\n      img: hdurl,\n      title: title,\n      copyright: copyright,\n      explanation: explanation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this);\n  });\n  const ref = useRef();\n  const lastCardComponent = useCallback(lastElementRef => {\n    if (ref.current) {\n      ref.current.disconnect();\n    }\n\n    ref.current = new IntersectionObserver(observees => {});\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Navbar-title\",\n        children: \" Spacestagram \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Navbar-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(HomeIcon, {\n          className: \"Navbar-button Navbar-button-filled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NotificationIcon, {\n          className: \"Navbar-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HeartIcon, {\n          className: \"Navbar-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: profilePic,\n          className: \"Navbar-avatar\",\n          alt: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Datepicker\",\n      children: /*#__PURE__*/_jsxDEV(DatePicker, {\n        open: true,\n        selected: selectedDate,\n        onChange: setSelectedDateHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CardComponent-box\",\n      children: cardComponents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"MFCp+v84KAzHjx4n6L8QrGiltAE=\", false, function () {\n  return [useBatchedNasaImageQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alexma/Desktop/spacetagram/src/App.js"],"names":["React","useState","useRef","useCallback","DatePicker","ReactComponent","HeartIcon","HomeIcon","NotificationIcon","CardComponent","useBatchedNasaImageQuery","dateComparison","profilePic","App","selectedDate","setSelectedDate","Date","now","currBatch","setCurrBatch","setSelectedDateHandler","newDate","batchSize","data","isAllDataFetched","isLoading","error","console","log","cardComponents","map","index","hdurl","copyright","explanation","title","date","ref","length","lastCardComponent","lastElementRef","current","disconnect","IntersectionObserver","observees"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { ReactComponent as HeartIcon } from \"./svg/heart-outline.svg\";\nimport { ReactComponent as HomeIcon } from \"./svg/home-outline.svg\";\nimport { ReactComponent as NotificationIcon } from \"./svg/notifications-outline.svg\";\nimport CardComponent from \"./CardComponent\";\nimport useBatchedNasaImageQuery from \"./hooks/useBatchedNasaImageQuery\";\nimport { dateComparison } from \"./utils/dateUtils\";\nimport profilePic from \"./profilepic.jpg\";\nimport \"./App.scss\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst App = () => {\n  const [selectedDate, setSelectedDate] = useState(Date.now());\n  const [currBatch, setCurrBatch] = useState(0);\n\n  const setSelectedDateHandler = (newDate) => {\n    if (!dateComparison(newDate, new Date(), \"after\")) {\n      setSelectedDate(newDate);\n      setCurrBatch(0);\n    }\n  };\n\n  const batchSize = 7;\n  const [data, isAllDataFetched, isLoading, error] = useBatchedNasaImageQuery(\n    selectedDate,\n    currBatch,\n    batchSize\n  );\n\n  console.log(data);\n  let cardComponents = (data || []).map(\n    ({ hdurl, copyright, explanation, title, date }, index) => {\n      let ref = null;\n      if (index === data.length - 1) {\n        ref = lastCardComponent;\n      }\n      return (\n        <CardComponent\n          ref={ref}\n          date={date}\n          img={hdurl}\n          title={title}\n          copyright={copyright}\n          explanation={explanation}\n        />\n      );\n    }\n  );\n\n  const ref = useRef();\n  const lastCardComponent = useCallback((lastElementRef) => {\n    if (ref.current) {\n      ref.current.disconnect();\n    }\n    ref.current = new IntersectionObserver((observees) => {});\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Navbar\">\n        <div className=\"Navbar-title\"> Spacestagram </div>\n        <div className=\"Navbar-buttons\">\n          <HomeIcon className=\"Navbar-button Navbar-button-filled\" />\n          <NotificationIcon className=\"Navbar-button\" />\n          <HeartIcon className=\"Navbar-button\" />\n          <img src={profilePic} className=\"Navbar-avatar\" alt=\"avatar\" />\n        </div>\n      </div>\n      <div className=\"Datepicker\">\n        <DatePicker\n          open\n          selected={selectedDate}\n          onChange={setSelectedDateHandler}\n        />\n      </div>\n      <div className=\"CardComponent-box\">{cardComponents}</div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}