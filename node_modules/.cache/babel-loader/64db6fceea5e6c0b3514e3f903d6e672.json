{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { nasaAPIDateFormat, addDaysToDate, dateComparison } from \"../utils/dateUtils\";\n\nconst calculateStartAndEndDates = (startDate, batchSize, currBatch) => {\n  let modifiedStartDate = addDaysToDate(startDate, batchSize + batchSize * currBatch);\n  let modifiedEndDate = addDaysToDate(modifiedStartDate, batchSize);\n  let todaysDate = new Date();\n\n  if (dateComparison(modifiedEndDate, todaysDate, \"after\")) {\n    modifiedEndDate = todaysDate;\n  }\n\n  modifiedEndDate = nasaAPIDateFormat(modifiedEndDate);\n  return [modifiedStartDate, modifiedEndDate];\n};\n\nconst useBatchedNasaImageQuery = (startDate, currBatch, batchSize) => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isAllDataFetched, setIsAllDataFetched] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setData([]);\n    setIsAllDataFetched(false);\n  }, [startDate]);\n  let [modifiedStartDate, modifiedEndDate] = calculateStartAndEndDates(startDate, currBatch, batchSize);\n  useEffect(() => {\n    if (!isAllDataFetched) {\n      const url = `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&start_date=${nasaAPIDateFormat(modifiedStartDate)}&end_date=${nasaAPIDateFormat(modifiedEndDate)}`;\n      axios.get(url).then(response => {\n        if (response.data && Array.isArray(response.data)) {\n          setData(data.concat(response.data));\n        } else if (response.data) {\n          setData(data.concat([response.data]));\n        }\n      }).catch(error => {\n        setError(error);\n      });\n    }\n  }, [startDate, currBatch]);\n\n  if (dateComparison(modifiedEndDate, new Date())) {\n    setIsAllDataFetched(true);\n  }\n\n  return [data, error];\n};\n\n_s(useBatchedNasaImageQuery, \"/KZXwZ/OazcgasB9O6iAK0yxeQ4=\");\n\nexport default useBatchedNasaImageQuery;","map":{"version":3,"sources":["/Users/alexma/Desktop/spacetagram/src/hooks/useBatchedNasaImageQuery.js"],"names":["useEffect","useState","axios","nasaAPIDateFormat","addDaysToDate","dateComparison","calculateStartAndEndDates","startDate","batchSize","currBatch","modifiedStartDate","modifiedEndDate","todaysDate","Date","useBatchedNasaImageQuery","data","setData","isAllDataFetched","setIsAllDataFetched","error","setError","url","process","env","REACT_APP_NASA_API_KEY","get","then","response","Array","isArray","concat","catch"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,oBAJP;;AAMA,MAAMC,yBAAyB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,SAAvB,KAAqC;AACrE,MAAIC,iBAAiB,GAAGN,aAAa,CACnCG,SADmC,EAEnCC,SAAS,GAAGA,SAAS,GAAGC,SAFW,CAArC;AAKA,MAAIE,eAAe,GAAGP,aAAa,CAACM,iBAAD,EAAoBF,SAApB,CAAnC;AACA,MAAII,UAAU,GAAG,IAAIC,IAAJ,EAAjB;;AACA,MAAIR,cAAc,CAACM,eAAD,EAAkBC,UAAlB,EAA8B,OAA9B,CAAlB,EAA0D;AACxDD,IAAAA,eAAe,GAAGC,UAAlB;AACD;;AACDD,EAAAA,eAAe,GAAGR,iBAAiB,CAACQ,eAAD,CAAnC;AAEA,SAAO,CAACD,iBAAD,EAAoBC,eAApB,CAAP;AACD,CAdD;;AAgBA,MAAMG,wBAAwB,GAAG,CAACP,SAAD,EAAYE,SAAZ,EAAuBD,SAAvB,KAAqC;AAAA;;AACpE,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CjB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAHQ,EAGN,CAACX,SAAD,CAHM,CAAT;AAKA,MAAI,CAACG,iBAAD,EAAoBC,eAApB,IAAuCL,yBAAyB,CAClEC,SADkE,EAElEE,SAFkE,EAGlED,SAHkE,CAApE;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACiB,gBAAL,EAAuB;AACrB,YAAMI,GAAG,GAAI,+CACXC,OAAO,CAACC,GAAR,CAAYC,sBACb,eAAcrB,iBAAiB,CAC9BO,iBAD8B,CAE9B,aAAYP,iBAAiB,CAACQ,eAAD,CAAkB,EAJjD;AAKAT,MAAAA,KAAK,CACFuB,GADH,CACOJ,GADP,EAEGK,IAFH,CAESC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACZ,IAAT,IAAiBa,KAAK,CAACC,OAAN,CAAcF,QAAQ,CAACZ,IAAvB,CAArB,EAAmD;AACjDC,UAAAA,OAAO,CAACD,IAAI,CAACe,MAAL,CAAYH,QAAQ,CAACZ,IAArB,CAAD,CAAP;AACD,SAFD,MAEO,IAAIY,QAAQ,CAACZ,IAAb,EAAmB;AACxBC,UAAAA,OAAO,CAACD,IAAI,CAACe,MAAL,CAAY,CAACH,QAAQ,CAACZ,IAAV,CAAZ,CAAD,CAAP;AACD;AACF,OARH,EASGgB,KATH,CASUZ,KAAD,IAAW;AAChBC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OAXH;AAYD;AACF,GApBQ,EAoBN,CAACZ,SAAD,EAAYE,SAAZ,CApBM,CAAT;;AAsBA,MAAIJ,cAAc,CAACM,eAAD,EAAkB,IAAIE,IAAJ,EAAlB,CAAlB,EAAiD;AAC/CK,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;;AACD,SAAO,CAACH,IAAD,EAAOI,KAAP,CAAP;AACD,CA1CD;;GAAML,wB;;AA2CN,eAAeA,wBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  nasaAPIDateFormat,\n  addDaysToDate,\n  dateComparison,\n} from \"../utils/dateUtils\";\n\nconst calculateStartAndEndDates = (startDate, batchSize, currBatch) => {\n  let modifiedStartDate = addDaysToDate(\n    startDate,\n    batchSize + batchSize * currBatch\n  );\n\n  let modifiedEndDate = addDaysToDate(modifiedStartDate, batchSize);\n  let todaysDate = new Date();\n  if (dateComparison(modifiedEndDate, todaysDate, \"after\")) {\n    modifiedEndDate = todaysDate;\n  }\n  modifiedEndDate = nasaAPIDateFormat(modifiedEndDate);\n\n  return [modifiedStartDate, modifiedEndDate];\n};\n\nconst useBatchedNasaImageQuery = (startDate, currBatch, batchSize) => {\n  const [data, setData] = useState(null);\n  const [isAllDataFetched, setIsAllDataFetched] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setData([]);\n    setIsAllDataFetched(false);\n  }, [startDate]);\n\n  let [modifiedStartDate, modifiedEndDate] = calculateStartAndEndDates(\n    startDate,\n    currBatch,\n    batchSize\n  );\n\n  useEffect(() => {\n    if (!isAllDataFetched) {\n      const url = `https://api.nasa.gov/planetary/apod?api_key=${\n        process.env.REACT_APP_NASA_API_KEY\n      }&start_date=${nasaAPIDateFormat(\n        modifiedStartDate\n      )}&end_date=${nasaAPIDateFormat(modifiedEndDate)}`;\n      axios\n        .get(url)\n        .then((response) => {\n          if (response.data && Array.isArray(response.data)) {\n            setData(data.concat(response.data));\n          } else if (response.data) {\n            setData(data.concat([response.data]));\n          }\n        })\n        .catch((error) => {\n          setError(error);\n        });\n    }\n  }, [startDate, currBatch]);\n\n  if (dateComparison(modifiedEndDate, new Date())) {\n    setIsAllDataFetched(true);\n  }\n  return [data, error];\n};\nexport default useBatchedNasaImageQuery;\n"]},"metadata":{},"sourceType":"module"}