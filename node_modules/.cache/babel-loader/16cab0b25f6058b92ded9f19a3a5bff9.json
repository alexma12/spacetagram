{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { nasaAPIDateFormat, addDaysToDate, dateComparison } from \"../utils/dateUtils\";\n\nconst calculateStartAndEndDates = (startDate, currBatch, batchSize) => {\n  let modifiedStartDate = addDaysToDate(startDate, batchSize + batchSize * currBatch);\n  let modifiedEndDate = addDaysToDate(modifiedStartDate, batchSize);\n  console.log(modifiedEndDate);\n  let todaysDate = new Date();\n\n  if (dateComparison(modifiedEndDate, todaysDate, \"after\")) {\n    modifiedEndDate = todaysDate;\n  }\n\n  modifiedEndDate = nasaAPIDateFormat(modifiedEndDate);\n  return [modifiedStartDate, modifiedEndDate];\n};\n\nconst useBatchedNasaImageQuery = function (startDate, currBatch) {\n  _s();\n\n  let batchSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n  const [data, setData] = useState(null);\n  const [isAllDataFetched, setIsAllDataFetched] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setData([]);\n    setIsAllDataFetched(false);\n    console.log(\"hello\");\n  }, [startDate]);\n  useEffect(() => {\n    if (!isAllDataFetched) {\n      let [modifiedStartDate, modifiedEndDate] = calculateStartAndEndDates(startDate, currBatch, batchSize);\n      const url = `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&start_date=${nasaAPIDateFormat(modifiedStartDate)}&end_date=${nasaAPIDateFormat(modifiedEndDate)}`;\n      axios.get(url).then(response => {\n        if (response.data && Array.isArray(response.data)) {\n          setData(prevData => prevData.concat(response.data));\n        } else if (response.data) {\n          setData(prevData => prevData.concat([response.data]));\n        }\n\n        if (dateComparison(modifiedEndDate, new Date())) {\n          setIsAllDataFetched(true);\n        }\n      }).catch(error => {\n        setError(error);\n      });\n    }\n  }, [startDate, currBatch, isAllDataFetched]);\n  return [data, error];\n};\n\n_s(useBatchedNasaImageQuery, \"/KZXwZ/OazcgasB9O6iAK0yxeQ4=\");\n\nexport default useBatchedNasaImageQuery;","map":{"version":3,"sources":["/Users/alexma/Desktop/spacetagram/src/hooks/useBatchedNasaImageQuery.js"],"names":["useEffect","useState","axios","nasaAPIDateFormat","addDaysToDate","dateComparison","calculateStartAndEndDates","startDate","currBatch","batchSize","modifiedStartDate","modifiedEndDate","console","log","todaysDate","Date","useBatchedNasaImageQuery","data","setData","isAllDataFetched","setIsAllDataFetched","error","setError","url","process","env","REACT_APP_NASA_API_KEY","get","then","response","Array","isArray","prevData","concat","catch"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  nasaAPIDateFormat,\n  addDaysToDate,\n  dateComparison,\n} from \"../utils/dateUtils\";\n\nconst calculateStartAndEndDates = (startDate, currBatch, batchSize) => {\n  let modifiedStartDate = addDaysToDate(\n    startDate,\n    batchSize + batchSize * currBatch\n  );\n\n  let modifiedEndDate = addDaysToDate(modifiedStartDate, batchSize);\n  console.log(modifiedEndDate);\n  let todaysDate = new Date();\n  if (dateComparison(modifiedEndDate, todaysDate, \"after\")) {\n    modifiedEndDate = todaysDate;\n  }\n  modifiedEndDate = nasaAPIDateFormat(modifiedEndDate);\n\n  return [modifiedStartDate, modifiedEndDate];\n};\n\nconst useBatchedNasaImageQuery = (startDate, currBatch, batchSize = 8) => {\n  const [data, setData] = useState(null);\n  const [isAllDataFetched, setIsAllDataFetched] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setData([]);\n    setIsAllDataFetched(false);\n    console.log(\"hello\");\n  }, [startDate]);\n\n  useEffect(() => {\n    if (!isAllDataFetched) {\n      let [modifiedStartDate, modifiedEndDate] = calculateStartAndEndDates(\n        startDate,\n        currBatch,\n        batchSize\n      );\n      const url = `https://api.nasa.gov/planetary/apod?api_key=${\n        process.env.REACT_APP_NASA_API_KEY\n      }&start_date=${nasaAPIDateFormat(\n        modifiedStartDate\n      )}&end_date=${nasaAPIDateFormat(modifiedEndDate)}`;\n\n      axios\n        .get(url)\n        .then((response) => {\n          if (response.data && Array.isArray(response.data)) {\n            setData((prevData) => prevData.concat(response.data));\n          } else if (response.data) {\n            setData((prevData) => prevData.concat([response.data]));\n          }\n          if (dateComparison(modifiedEndDate, new Date())) {\n            setIsAllDataFetched(true);\n          }\n        })\n        .catch((error) => {\n          setError(error);\n        });\n    }\n  }, [startDate, currBatch, isAllDataFetched]);\n\n  return [data, error];\n};\nexport default useBatchedNasaImageQuery;\n"]},"metadata":{},"sourceType":"module"}