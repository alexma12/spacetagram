[{"/Users/alexma/Desktop/spacetagram/src/index.js":"1","/Users/alexma/Desktop/spacetagram/src/App.js":"2","/Users/alexma/Desktop/spacetagram/src/CardComponent.js":"3","/Users/alexma/Desktop/spacetagram/src/hooks/useBatchedNasaImageQuery.js":"4","/Users/alexma/Desktop/spacetagram/src/utils/dateUtils.js":"5"},{"size":219,"mtime":1642315139282,"results":"6","hashOfConfig":"7"},{"size":3020,"mtime":1642570010499,"results":"8","hashOfConfig":"7"},{"size":1160,"mtime":1642569084627,"results":"9","hashOfConfig":"7"},{"size":2157,"mtime":1642568836867,"results":"10","hashOfConfig":"7"},{"size":808,"mtime":1642568610163,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"7u9vbb",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/alexma/Desktop/spacetagram/src/index.js",[],["26","27"],"/Users/alexma/Desktop/spacetagram/src/App.js",["28"],"import React, { useState, useRef, useCallback } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { ReactComponent as HeartIcon } from \"./svg/heart-outline.svg\";\nimport { ReactComponent as HomeIcon } from \"./svg/home-outline.svg\";\nimport { ReactComponent as NotificationIcon } from \"./svg/notifications-outline.svg\";\nimport CardComponent from \"./CardComponent\";\nimport useBatchedNasaImageQuery from \"./hooks/useBatchedNasaImageQuery\";\nimport { dateComparison } from \"./utils/dateUtils\";\nimport profilePic from \"./profilepic.jpg\";\nimport \"./App.scss\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst App = () => {\n  const [selectedDate, setSelectedDate] = useState(Date.now());\n  const [currBatch, setCurrBatch] = useState(0);\n\n  const setSelectedDateHandler = (newDate) => {\n    if (!dateComparison(newDate, new Date(), \"after\")) {\n      setSelectedDate(newDate);\n      setCurrBatch(0);\n    }\n  };\n\n  const batchSize = 7;\n  const [data, isAllDataFetched, isLoading, error] = useBatchedNasaImageQuery(\n    selectedDate,\n    currBatch,\n    batchSize\n  );\n\n  const ref = useRef();\n  const lastCardComponent = useCallback(\n    (lastElementRef) => {\n      if (isLoading) return;\n      if (ref.current) {\n        ref.current.disconnect();\n      }\n\n      ref.current = new IntersectionObserver(\n        (observees) => {\n          if (observees[0].isIntersecting && !isAllDataFetched) {\n            setCurrBatch((prevBatch) => prevBatch + 1);\n          }\n        },\n        {\n          threshold: 0.3,\n        }\n      );\n      if (lastElementRef) {\n        ref.current.observe(lastElementRef);\n      }\n    },\n    [isAllDataFetched, isLoading]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"Navbar\">\n        <div className=\"Navbar-title\"> Spacestagram </div>\n        <div className=\"Navbar-buttons\">\n          <HomeIcon className=\"Navbar-button Navbar-button-filled\" />\n          <NotificationIcon className=\"Navbar-button\" />\n          <HeartIcon className=\"Navbar-button\" />\n          <img src={profilePic} className=\"Navbar-avatar\" alt=\"avatar\" />\n        </div>\n      </div>\n      <div className=\"Datepicker\">\n        <div className=\"Datepicker-title\">\n          Select A Start Date To Query From\n        </div>\n        <DatePicker\n          open\n          selected={selectedDate}\n          onChange={setSelectedDateHandler}\n        />\n      </div>\n      <div className=\"CardComponent-box\">\n        {(data || []).map(\n          ({ hdurl, copyright, explanation, title, date }, index) => {\n            let refProp = null;\n            if (index === data.length - 1) {\n              refProp = lastCardComponent;\n            }\n            return (\n              <CardComponent\n                refProp={refProp}\n                date={date}\n                img={hdurl}\n                title={title}\n                copyright={copyright}\n                explanation={explanation}\n              />\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/alexma/Desktop/spacetagram/src/CardComponent.js",[],["29","30"],"/Users/alexma/Desktop/spacetagram/src/hooks/useBatchedNasaImageQuery.js",["31"],"import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  nasaAPIDateFormat,\n  addDaysToDate,\n  dateComparison,\n} from \"../utils/dateUtils\";\n\nconst calculateStartAndEndDates = (startDate, currBatch, batchSize) => {\n  let modifiedStartDate = addDaysToDate(\n    startDate,\n    currBatch + batchSize * currBatch\n  );\n\n  let modifiedEndDate = addDaysToDate(modifiedStartDate, batchSize);\n  let todaysDate = new Date();\n  if (dateComparison(modifiedEndDate, todaysDate, \"after\")) {\n    modifiedEndDate = todaysDate;\n  }\n  modifiedEndDate = nasaAPIDateFormat(modifiedEndDate);\n\n  return [modifiedStartDate, modifiedEndDate];\n};\n\nconst useBatchedNasaImageQuery = (startDate, currBatch, batchSize = 7) => {\n  const [data, setData] = useState(null);\n  const [isAllDataFetched, setIsAllDataFetched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setData([]);\n    setIsAllDataFetched(false);\n  }, [startDate]);\n\n  useEffect(() => {\n    if (!isAllDataFetched) {\n      let [modifiedStartDate, modifiedEndDate] = calculateStartAndEndDates(\n        startDate,\n        currBatch,\n        batchSize\n      );\n      const url = `https://api.nasa.gov/planetary/apod?api_key=${\n        process.env.REACT_APP_NASA_API_KEY\n      }&start_date=${nasaAPIDateFormat(\n        modifiedStartDate\n      )}&end_date=${nasaAPIDateFormat(modifiedEndDate)}`;\n\n      setIsLoading(true);\n      axios\n        .get(url)\n        .then((response) => {\n          if (response.data && Array.isArray(response.data)) {\n            setData((prevData) => prevData.concat(response.data));\n          } else if (response.data) {\n            setData((prevData) => prevData.concat([response.data]));\n          }\n          if (dateComparison(modifiedEndDate, new Date(), \"equal\")) {\n            setIsAllDataFetched(true);\n          }\n        })\n        .catch((error) => {\n          setError(error);\n        });\n      setIsLoading(false);\n    }\n  }, [startDate, currBatch, isAllDataFetched]);\n\n  return [data, isAllDataFetched, isLoading, error];\n};\nexport default useBatchedNasaImageQuery;\n","/Users/alexma/Desktop/spacetagram/src/utils/dateUtils.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":25,"column":45,"nodeType":"38","messageId":"39","endLine":25,"endColumn":50},{"ruleId":"32","replacedBy":"40"},{"ruleId":"34","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":67,"column":6,"nodeType":"44","endLine":67,"endColumn":46,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar",["46"],["47"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'batchSize'. Either include it or remove the dependency array.","ArrayExpression",["48"],"no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [startDate, currBatch, isAllDataFetched, batchSize]",{"range":"51","text":"52"},[2016,2056],"[startDate, currBatch, isAllDataFetched, batchSize]"]