[{"/Users/alexma/Desktop/spacetagram/src/index.js":"1","/Users/alexma/Desktop/spacetagram/src/App.js":"2","/Users/alexma/Desktop/spacetagram/src/CardComponent.js":"3","/Users/alexma/Desktop/spacetagram/src/hooks/useBatchedNasaImageQuery.js":"4","/Users/alexma/Desktop/spacetagram/src/utils/dateUtils.js":"5"},{"size":219,"mtime":1642315139282,"results":"6","hashOfConfig":"7"},{"size":2840,"mtime":1642567530213,"results":"8","hashOfConfig":"7"},{"size":1038,"mtime":1642567266634,"results":"9","hashOfConfig":"7"},{"size":2148,"mtime":1642566881102,"results":"10","hashOfConfig":"7"},{"size":816,"mtime":1642557042011,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"7u9vbb",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/alexma/Desktop/spacetagram/src/index.js",[],["25","26"],"/Users/alexma/Desktop/spacetagram/src/App.js",["27"],"/Users/alexma/Desktop/spacetagram/src/CardComponent.js",[],["28","29"],"/Users/alexma/Desktop/spacetagram/src/hooks/useBatchedNasaImageQuery.js",["30"],"import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  nasaAPIDateFormat,\n  addDaysToDate,\n  dateComparison,\n} from \"../utils/dateUtils\";\n\nconst calculateStartAndEndDates = (startDate, currBatch, batchSize) => {\n  let modifiedStartDate = addDaysToDate(\n    startDate,\n    currBatch + batchSize * currBatch\n  );\n\n  let modifiedEndDate = addDaysToDate(modifiedStartDate, batchSize);\n  let todaysDate = new Date();\n  if (dateComparison(modifiedEndDate, todaysDate, \"after\")) {\n    modifiedEndDate = todaysDate;\n  }\n  modifiedEndDate = nasaAPIDateFormat(modifiedEndDate);\n\n  return [modifiedStartDate, modifiedEndDate];\n};\n\nconst useBatchedNasaImageQuery = (startDate, currBatch, batchSize = 7) => {\n  const [data, setData] = useState(null);\n  const [isAllDataFetched, setIsAllDataFetched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setData([]);\n    setIsAllDataFetched(false);\n  }, [startDate]);\n\n  useEffect(() => {\n    if (!isAllDataFetched) {\n      let [modifiedStartDate, modifiedEndDate] = calculateStartAndEndDates(\n        startDate,\n        currBatch,\n        batchSize\n      );\n      const url = `https://api.nasa.gov/planetary/apod?api_key=${\n        process.env.REACT_APP_NASA_API_KEY\n      }&start_date=${nasaAPIDateFormat(\n        modifiedStartDate\n      )}&end_date=${nasaAPIDateFormat(modifiedEndDate)}`;\n\n      setIsLoading(true);\n      axios\n        .get(url)\n        .then((response) => {\n          if (response.data && Array.isArray(response.data)) {\n            setData((prevData) => prevData.concat(response.data));\n          } else if (response.data) {\n            setData((prevData) => prevData.concat([response.data]));\n          }\n          if (dateComparison(modifiedEndDate, new Date())) {\n            setIsAllDataFetched(true);\n          }\n        })\n        .catch((error) => {\n          setError(error);\n        });\n      setIsLoading(false);\n    }\n  }, [startDate, currBatch, isAllDataFetched]);\n\n  return [data, isAllDataFetched, isLoading, error];\n};\nexport default useBatchedNasaImageQuery;\n","/Users/alexma/Desktop/spacetagram/src/utils/dateUtils.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":25,"column":45,"nodeType":"37","messageId":"38","endLine":25,"endColumn":50},{"ruleId":"31","replacedBy":"39"},{"ruleId":"33","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":67,"column":6,"nodeType":"43","endLine":67,"endColumn":46,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar",["45"],["46"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'batchSize'. Either include it or remove the dependency array.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [startDate, currBatch, isAllDataFetched, batchSize]",{"range":"50","text":"51"},[2007,2047],"[startDate, currBatch, isAllDataFetched, batchSize]"]